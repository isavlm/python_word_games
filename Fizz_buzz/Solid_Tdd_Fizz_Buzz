# FizzBuzz using SOLID and TDD

import unittest   # Need unittest for TDD

#SOLID ORGANIZATION 

class Rule:
    def applies(self, number):
        raise NotImplementedError

    def action(self):
        raise NotImplementedError


class FizzRule(Rule):
    def applies(self, number):
        return number % 3 == 0

    def action(self):
        return "Fizz"


class BuzzRule(Rule):
    def applies(self, number):
        return number % 5 == 0

    def action(self):
        return "Buzz"


class FizzBuzzRule(Rule):
    def applies(self, number):
        return number % 3 == 0 and number % 5 == 0

    def action(self):
        return ""


class NumberRule(Rule):
    def __init__(self, number):
        self.number = number

    def applies(self, number):
        return self.number == number

    def action(self):
        return str(self.number)


class FizzBuzzGame:
    def __init__(self, rules):
        self.rules = rules

    def play(self, number):
        result = ''
        for rule in self.rules:
            if rule.applies(number):
                result += rule.action()
        return result or str(number)

#TDD

class TestFizzBuzzGame(unittest.TestCase):
    def setUp(self):
        self.game = FizzBuzzGame([FizzBuzzRule(), FizzRule(), BuzzRule()])

    def test_fizz(self):
        self.assertEqual(self.game.play(3), "Fizz")

    def test_buzz(self):
        self.assertEqual(self.game.play(5), "Buzz")

    def test_fizzbuzz(self):
        self.assertEqual(self.game.play(480), "FizzBuzz")

    def test_number(self):
        self.assertEqual(self.game.play(2), "2")

    def test_fizz_buzz(self):
        self.assertEqual(self.game.play(45), "FizzBuzz")


if __name__ == '__main__':
    unittest.main()
